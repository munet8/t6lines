#include "hsp3dish.as"
#include "t6lines.as"

title "tan6 lines"

;-------------------------------------------------------------------------------
;
; 最初期設定
;
;-------------------------------------------------------------------------------

*first

; フォント画像のロード（半角）
celload "fon_cha1.png", 2
celdiv 2, g_font_png_x, g_font_png_y, 0, 0

; フォント画像のロード（全角）
celload "fon_cha2.png", 3
celdiv 3, g_font_png_y, g_font_png_y, 0, 0

; フォント画像のロード（全角）
celload "fon_ball.png", 4
celdiv 4, g_ball_size, g_ball_size, 0, 0

buffer 5, g_ball_size, g_ball_size, 0
gsel 0

int_mousex = 0
int_mousey = 0

; フィールド配列
dim arr_field, 9, 9

; フィールド配列・移動可能
MovableArrInit

; スコア
int_score = 0

; 選択状態
int_selected_x = -1
int_selected_y = -1
int_selected_movable = 0
float_rotate = 0.0

int_vanish = 255
int_gameover = 1

; 乱数初期化
randomize

; 画面クリア設定
setcls CLSMODE_SOLID, 0

; フィールド初期配置
gosub *make_next
gosub *ball_set
gosub *make_next

*play

	; 入力
	stick int_stk
	if ( int_stk & 256 ) {
		int_mousex = mousex
		int_mousey = mousey

		i = ((( 20 * int_mousex / g_screen_x ) + 1 ) / 2 ) - 1
		j = ((( 20 * int_mousey / g_screen_view_y ) + 1 ) / 2) -1
		if (( 0 <= i ) & ( i < 9 ) & ( 0 <= j ) & ( j < 9 )) {
			if (( int_selected_x >= 0 ) & ( int_selected_y >= 0 ) & ( MovableArrGet(i, j) )) {
				if ( arr_field(i, j) = 0 ) {
					; 選択済み＆対象が空白->移動と配布
					arr_field(i, j) = arr_field(int_selected_x, int_selected_y)
					arr_field(int_selected_x, int_selected_y) = 0
					int_selected_x = -1
					int_selected_y = -1

					int_comp_x = i
					int_comp_y = j
					gosub *complete_check

					if ( arr_field( int_comp_x, int_comp_y ) > 0 ) {
						; 消えなかったら配布する
						gosub *ball_set
						gosub *make_next
					}
				} else {
					; 選択状態＆対象が石->選択
					gosub *select
				}
			} else {
				; 未選択状態->選択
				if ( arr_field(i, j) > 0 ) {
					gosub *select
				}
			}
		} else {
			; ステータスバー
			if ( int_mousey >= ( g_screen_view_y + g_font_y )) {
				goto *first
			} else {
				; 選択解除
				int_selected_x = -1
				int_selected_y = -1
			}
		}
	}

	; ゲームオーバー判定
	if ( int_gameover = 0 ) :goto *dead

	; 描画
	redraw 0
	gfilter 1

	if (( int_selected_x >= 0 ) & ( int_selected_y >= 0 )) {
		color 51, 51, 51
		i = ( 2 * int_selected_x + 1 ) * g_screen_x / 20
		j = ( 2 * int_selected_y + 1 ) * g_screen_view_y / 20
		m = ( 2 * int_selected_x + 3 ) * g_screen_x / 20
		n = ( 2 * int_selected_y + 3 ) * g_screen_view_y / 20
		boxf i, j, m, n
	}

	; 描画・ボール
	f = double( 0.1 * g_screen_x / g_ball_size )
	g = double( 0.1 * g_screen_view_y / g_ball_size )
	for i, 0, 9, 1
		for j, 0, 9, 1
			m = ( 2 * i + 1 ) * g_screen_x / 20
			n = ( 2 * j + 1 ) * g_screen_view_y / 20
			pos m, n
			if ( arr_field(i, j) ) {
				gmode 5, 0, 0, 255
				if (( i = int_selected_x ) & ( j = int_selected_y ) & int_selected_movable) {
					; 選択中は回転する
					float_rotate += 0.12
					if ( float_rotate >= ( 2 * M_PI )) :float_rotate -= 2 * M_PI
					m = ( i + 1 ) * g_screen_x / 10
					n = ( j + 1 ) * g_screen_view_y / 10
					pos m, n
					gmode 5, g_ball_size, g_ball_size, 255
					grotate 4, g_ball_size * arr_field( i, j ), 0, float_rotate, f * g_ball_size, g * g_ball_size
				} else {
					; 選択しなければor動けないならば普通に置く
					celput 4, arr_field(i, j), f, g
				}
				gmode 0
			} else {
				if (( int_selected_x >= 0 ) & ( int_selected_y >= 0 ) & ( MovableArrGet(i, j) = 0 )) {
					color 255, 255, 255
					; 移動できない場合、ペケを描く
					m = ( 2 * i + 3 ) * g_screen_x / 20
					n = ( 2 * j + 3 ) * g_screen_view_y / 20
					line m, n
				}
			}
		next
	next

	; 描画・縦線
	color 255, 255, 255
	m =      g_screen_view_y / 20
	n = 19 * g_screen_view_y / 20
	for i, 0, 10, 1
		j = ( 2 * i + 1 ) * g_screen_x / 20
		line j, m, j, n
	next

	; 描画・横線
	m =      g_screen_x / 20
	n = 19 * g_screen_x / 20
	for i, 0, 10, 1
		j = ( 2 * i + 1 ) * g_screen_view_y / 20
		line m, j, n, j
	next

	; Score
	gosub *print_score

	; Next
	pos g_screen_x / 2, g_screen_view_y
	fprint "Next: ", 255
	f = double( 1.0 * g_font_y / g_ball_size )
	gmode 0
	for i, 0, 3, 1
		pos ( g_screen_x / 2 ) + (( i + 3 ) * g_font_y ), g_screen_view_y
		celput 4, arr_next(i), f, f
	next

	; ステータスバーの表示
	gosub *status_bar

	redraw 1
	await 16

	goto *play

*dead
	redraw 0
	gfilter 1

	; 描画
	color int_vanish / 5, 0, 0
	boxf 0, 0, g_screen_x, g_screen_y

	; 描画・ボール
	f = double( 0.1 * g_screen_x / g_ball_size )
	g = double( 0.1 * g_screen_view_y / g_ball_size )
	for i, 0, 9, 1
		for j, 0, 9, 1
			m = ( 2 * i + 1 ) * g_screen_x / 20
			n = ( 2 * j + 1 ) * g_screen_view_y / 20
			pos m, n
			if ( arr_field(i, j) ) {
				gmode 5, 0, 0, int_vanish
				celput 4, arr_field(i, j), f, g
				gmode 0
			} else {
				; 描画・移動できません
				if (( int_selected_x >= 0 ) & ( int_selected_y >= 0 ) & ( MovableArrGet(i, j) = 0 )) {
					color 255, 255, 255
					m = ( 2 * i + 3 ) * g_screen_x / 20
					n = ( 2 * j + 3 ) * g_screen_view_y / 20
					line m, n
				}
			}
		next
	next

	; 描画・縦線
	color int_vanish, int_vanish, int_vanish
	m =      g_screen_view_y / 20
	n = 19 * g_screen_view_y / 20
	for i, 0, 10, 1
		j = ( 2 * i + 1 ) * g_screen_x / 20
		line j, m, j, n
	next

	; 描画・横線
	m =      g_screen_x / 20
	n = 19 * g_screen_x / 20
	for i, 0, 10, 1
		j = ( 2 * i + 1 ) * g_screen_view_y / 20
		line m, j, n, j
	next

	; Score
	gosub *print_score

	; Next
	pos g_screen_x / 2, g_screen_view_y
	fprint "Next: ", 255
	f = double( 1.0 * g_font_y / g_ball_size )
	gmode 0
	for i, 0, 3, 1
		pos ( g_screen_x / 2 ) + (( i + 3 ) * g_font_y ), g_screen_view_y
		celput 4, arr_next(i), f, f
	next

	gosub *status_bar

	if ( int_vanish > 0 ) :int_vanish-=5 :else :goto *menu

	redraw 1
	await 16
	goto *dead

*menu
	redraw 0
	gfilter 1

	stick int_stk, 0 :if ( int_stk & 256 ) {
		int_mousex = mousex
		int_mousey = mousey
		if ( int_mousey >= ( g_screen_view_y + g_font_y )) {
			goto *first
		}
	} else {
		if ( int_stk ) :goto *first
	}

	pos 2 * g_font_x, 1 * g_font_y
	fprint "Your score is " + int_score + ".", 255
	pos 2 * g_font_x, 3 * g_font_y
	fprint g_tan6 + "lines｡ v1.3", 255
	pos 2 * g_font_x, 4 * g_font_y
	fprint "2012-2013(C) m-ushi", 255

	gosub *status_bar

	redraw 1
	await 16

	goto *menu

; 新しい球を降らせる
*ball_set
	n = 0
	for j, 0, 9, 1
		for k, 0, 9, 1
			if ( arr_field(j, k) = 0 ) :n++
			if ( n = 3 ) :_break
		next
		if ( n = 3 ) :_break
	next

	dim arr_set, 3, 2
	for i, 0, n, 1
		do
			j = rnd(9) :k = rnd(9)
		until ( arr_field(j, k) = 0 )
		arr_field(j, k) = arr_next(i)
		arr_set(i, 0) = j
		arr_set(i, 1) = k
	next

	for i, 0, n, 1
		int_comp_x = arr_set(i, 0)
		int_comp_y = arr_set(i, 1)
		gosub *complete_check
	next

	; ゲームオーバー判定
	int_gameover = 0
	for j, 0, 9, 1
		for k, 0, 9, 1
			if ( arr_field(j, k) = 0 ) :int_gameover = 1
			if ( int_gameover ) :_break
		next
		if ( int_gameover ) :_break
	next

	return

; NEXTの設定
*make_next
	dim arr_next, 3
	for i, 0, 3, 1
		arr_next(i) = rnd(7) + 1
	next
	return

; 移動可能チェック
*movable_check
	dim arr_movable, 9, 9
	cx = int_selected_x
	cy = int_selected_y

*movable_iter
	ci = 0
	if ( 0 <= cx ) & ( cx < 9 ) & ( 0 <= cy ) & ( cy < 9 ) {
	} else {
		ci = 1
	}

	if ( ci ) :goto *movable_iter

	return

; 選択
; 事前に座標情報 i, j を与えておく。分かりづらいな
*select
	int_selected_x = i
	int_selected_y = j
	float_rotate = 0.0

	MovableArrInit
	MovableArrSet i, j
	int_selected_movable = ( MovableArrGet( i-1, j ) | MovableArrGet( i+1, j ) | MovableArrGet( i, j-1 ) | MovableArrGet( i, j+1 ))

	return

; 完成チェック
; 事前に座標情報 int_comp_x int_comp_y を与えておく
*complete_check
	dim int_comp_d, 8
	; 配列の添字と向き関係
	; 567
	; 3 4
	; 012

	; 同じ色探し
	LineCheckAll int_comp_x, int_comp_y

	; 同じ色消し
	for cj, 0, 4, 1
		ck = 7 - cj
		clen = int_comp_d(cj) + int_comp_d(ck)

		; 十字消し
		if ( clen > 1 ) {
			cm = cj ^ 2
			cn = ck ^ 2
			cx = int_comp_x
			cy = int_comp_y
			; 走査する場所・先端に移動
			for cp, 0, int_comp_d(ck), 1
				LineCursor cx, cy, ck
			next
			; １個ずつ移動して十字調査
			for cp, 0, clen + 1, 1
				; ５個揃ってない石の場合、両端はスルー
				if (( clen < 4 ) & (( cp = 0 ) | ( cp = clen ))) {
					LineCursor cx, cy, cj
					_continue
				}
				; 長さを計測
				int_comp_i = LineCheck( cx, cy, cm )
				int_comp_j = LineCheck( cx, cy, cn )
				clen2 = int_comp_i + int_comp_j
				if ( clen2 > 1 ) {
					; ５個揃ってない石の場合、左右に伸びていないとスルー＆末端だとスルー
					if (( clen2 < 4 ) & (( int_comp_i = 0 ) | ( int_comp_j = 0 ) | ( cp = 0 ) | ( cp = clen ))) {
						LineCursor cx, cy, cj
						_continue
					}
					;dialog "(x, y) = (" + cx + ", " + cy + ")\nDirection = " + cm + "," + cn + "\nLength = " + clen2
					int_score += EvalScore( clen + clen2 + 1 )
					arr_field( int_comp_x, int_comp_y ) = 0
					LineErase int_comp_x, int_comp_y, cj, int_comp_d(cj)
					LineErase int_comp_x, int_comp_y, ck, int_comp_d(ck)
					LineErase cx, cy, cm, int_comp_i
					LineErase cx, cy, cn, int_comp_j
					; 中断
					clen = 0
					_break
				}
				LineCursor cx, cy, cj
			next
			if ( clen = 0 ) {
				; 十字消し成功後、座標初期化
				dim int_comp_d, 8
			}
		}

		; 通常消し
		if ( clen > 3 ) {
			int_score += EvalScore( clen + 1 )

			arr_field( int_comp_x, int_comp_y ) = 0

			LineErase int_comp_x, int_comp_y, cj, int_comp_d(cj)
			LineErase int_comp_x, int_comp_y, ck, int_comp_d(ck)
			_break
		}
	next

	return

*status_bar
	; ステータスバーの表示
	color 85, 85, 102
	boxf 0, g_screen_view_y + g_font_y, g_screen_x, g_screen_y

	color 255, 255, 255
	line 0, g_screen_view_y + g_font_y, g_screen_x, g_screen_view_y + g_font_y

	pos ( 2 * g_screen_x / 4 ) - ( 5 * g_font_x / 2 ), g_screen_view_y + g_font_y
	fprint "Retry", 255

	return

*print_score
	pos 0, g_screen_view_y
	fprint "Score: ", 255
	switch log10(int_score)
	case 6
	case 7
		i = int_score / 1000
		s = "" + i + "k"
		pos ( 13 - log10(int_score) ) * g_font_x, g_screen_view_y
		swbreak
	case 8
	case 9
	case 10
		i = int_score / 1000000
		s = "" + i + "M"
		pos ( 16 - log10(int_score) ) * g_font_x, g_screen_view_y
		swbreak
	default
		s = "" + int_score
		pos ( 11 - log10(int_score) ) * g_font_x, g_screen_view_y
		swbreak
	swend
	fprint s, 255

	return
